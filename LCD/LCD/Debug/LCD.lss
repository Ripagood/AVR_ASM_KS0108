
AVRASM ver. 2.1.52  C:\Documents and Settings\Admin\my documents\atmel studio\6.2\LCD\LCD\LCD.asm Wed Oct 07 22:14:59 2015

[builtin](2): Including file 'C:\Program Files\Atmel\Atmel Toolchain\AVR Assembler\Native\2.1.1117\avrassembler\Include\m16def.inc'
C:\Documents and Settings\Admin\my documents\atmel studio\6.2\LCD\LCD\LCD.asm(8): Including file 'C:\Program Files\Atmel\Atmel Toolchain\AVR Assembler\Native\2.1.1117\avrassembler\Include\m16def.inc'
                 
                 /*
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m16def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega16
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega16
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M16DEF_INC_
                 #define _M16DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega16
                 #pragma AVRPART ADMIN PART_NAME ATmega16
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x94
                 .equ	SIGNATURE_002	= 0x03
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	OCR0	= 0x3c
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCSR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	OCDR	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	ICR1L	= 0x26
                 .equ	ICR1H	= 0x27
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARL	= 0x1e
                 .equ	EEARH	= 0x1f
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTA	= 0x1b
                 .equ	DDRA	= 0x1a
                 .equ	PINA	= 0x19
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCH	= 0x05
                 .equ	ADCL	= 0x04
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TCCR0 - Timer/Counter Control Register
                 .equ	CS00	= 0	; Clock Select 1
                 .equ	CS01	= 1	; Clock Select 1
                 .equ	CS02	= 2	; Clock Select 2
                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                 .equ	CTC0	= WGM01	; For compatibility
                 .equ	COM00	= 4	; Compare match Output Mode 0
                 .equ	COM01	= 5	; Compare Match Output Mode 1
                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                 .equ	PWM0	= WGM00	; For compatibility
                 .equ	FOC0	= 7	; Force Output Compare
                 
                 ; TCNT0 - Timer/Counter Register
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0 - Output Compare Register
                 .equ	OCR0_0	= 0	; 
                 .equ	OCR0_1	= 1	; 
                 .equ	OCR0_2	= 2	; 
                 .equ	OCR0_3	= 3	; 
                 .equ	OCR0_4	= 4	; 
                 .equ	OCR0_5	= 5	; 
                 .equ	OCR0_6	= 6	; 
                 .equ	OCR0_7	= 7	; 
                 
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0	= 1	; Output Compare Flag 0
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF2	= 5	; External Interrupt Flag 2
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - General Interrupt Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EEWEE	= EEMWE	; For compatibility
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SE	= 6	; Sleep Enable
                 .equ	SM2	= 7	; Sleep Mode Select
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	EXTREF	= EXTRF	; For compatibility
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 .equ	JTRF	= 4	; JTAG Reset Flag
                 .equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SFIOR - Special function I/O register
                 ;.equ	PSR10	= 0	; Prescaler reset
                 .equ	PSR2	= 1	; Prescaler reset
                 .equ	PUD	= 2	; Pull-up Disable
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Waveform Generation Mode
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Waveform Genration Mode
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 ; SFIOR - Special Function IO Register
                 ;.equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	I2BR	= TWBR	; For compatibility
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	I2CR	= TWCR	; For compatibility
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	I2IE	= TWIE	; For compatibility
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	I2EN	= TWEN	; For compatibility
                 .equ	ENI2C	= TWEN	; For compatibility
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	I2WC	= TWWC	; For compatibility
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	I2STO	= TWSTO	; For compatibility
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	I2STA	= TWSTA	; For compatibility
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	I2EA	= TWEA	; For compatibility
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 .equ	I2INT	= TWINT	; For compatibility
                 
                 ; TWSR - TWI Status Register
                 .equ	I2SR	= TWSR	; For compatibility
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWS0	= TWPS0	; For compatibility
                 .equ	I2GCE	= TWPS0	; For compatibility
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS1	= TWPS1	; For compatibility
                 .equ	TWS3	= 3	; TWI Status
                 .equ	I2S3	= TWS3	; For compatibility
                 .equ	TWS4	= 4	; TWI Status
                 .equ	I2S4	= TWS4	; For compatibility
                 .equ	TWS5	= 5	; TWI Status
                 .equ	I2S5	= TWS5	; For compatibility
                 .equ	TWS6	= 6	; TWI Status
                 .equ	I2S6	= TWS6	; For compatibility
                 .equ	TWS7	= 7	; TWI Status
                 .equ	I2S7	= TWS7	; For compatibility
                 
                 ; TWDR - TWI Data register
                 .equ	I2DR	= TWDR	; For compatibility
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	I2AR	= TWAR	; For compatibility
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                 .equ	ADFR	= ADATE	; For compatibility
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                 
                 
                 ; ***** JTAG *************************
                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                 .equ	IDRD	= OCDR7	; For compatibility
                 
                 ; MCUCSR - MCU Control And Status Register
                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                 ;.equ	JTD	= 7	; JTAG Interface Disable
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCSR - Store Program Memory Control Register
                 .equ	SPMCR	= SPMCSR	; For compatibility
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read While Write section read enable
                 .equ	ASRE	= RWWSRE	; For compatibility
                 .equ	RWWSB	= 6	; Read While Write Section Busy
                 .equ	ASB	= RWWSB	; For compatibility
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                 .equ	PC7	= 7	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDTOE	= 4	; RW
                 .equ	WDDE	= WDTOE	; For compatibility
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	CKOPT	= 4	; Oscillator Options
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	JTAGEN	= 6	; Enable JTAG
                 .equ	OCDEN	= 7	; Enable OCD
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x1fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 1024
                 .equ	RAMEND	= 0x045f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x01ff
                 .equ	EEPROMEND	= 0x01ff
                 .equ	EEADRBITS	= 9
                 #pragma AVRPART MEMORY PROG_FLASH 16384
                 #pragma AVRPART MEMORY EEPROM 512
                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x1c00
                 .equ	NRWW_STOP_ADDR	= 0x1fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x1bff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x1f80
                 .equ	SECONDBOOTSTART	= 0x1f00
                 .equ	THIRDBOOTSTART	= 0x1e00
                 .equ	FOURTHBOOTSTART	= 0x1c00
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	OC2addr	= 0x0006	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x0008	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x000c	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x000e	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0010	; Timer/Counter1 Overflow
                 .equ	OVF0addr	= 0x0012	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x0014	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x0016	; USART, Rx Complete
                 .equ	UDREaddr	= 0x0018	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x001a	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x001c	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x001e	; EEPROM Ready
                 .equ	ACIaddr	= 0x0020	; Analog Comparator
                 .equ	TWIaddr	= 0x0022	; 2-wire Serial Interface
                 .equ	INT2addr	= 0x0024	; External Interrupt Request 2
                 .equ	OC0addr	= 0x0026	; Timer/Counter0 Compare Match
                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                 
                 #endif  /* _M16DEF_INC_ */
                 
                 
                  * LCD.asm
                  *
                  *  Created: 9/30/2015 12:44:08 PM
                  *   Author: ELIAS
                  */ 
                 
                 .include "m16def.inc"
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m16def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega16
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega16
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M16DEF_INC_
                 
                 #endif  /* _M16DEF_INC_ */
                 
                 
                 .EQU DATA = PORTD
                 .EQU DATA_PIN = PIND
                 .EQU DATA_DDR = DDRD
                 
                 .EQU CONTROL = PORTA
                 .EQU CONTROL_DDR = DDRA
                 
                 
                 
                 .EQU CS1 = 0
                 .EQU CS2 = 1
                 .EQU RS = 2 //DATA OR INSTRUCTION
                 .EQU RW = 3// READ OR WRITE
                 .EQU ENABLE = 4
                 .EQU RESET = 5
                 
                 .EQU IMAGE = 0x800 // z pointer for bmp image
                 
                 ; DARK_POINT_AT X,Y 
                 .MACRO		DARK_POINT_AT
                 			LDI R17,@0
                 			LDI R16,@1
                 			call SET_XY
                 .ENDMACRO
                 
                 ; LIGHT_POINT_AT X,Y 
                 .MACRO		LIGHT_POINT_AT
                 			LDI R17,@0
                 			LDI R16,@1
                 			call CLEAR_XY
                 .ENDMACRO
                 
                 
                 ; HORIZONTAL_LINE X,Y, FINAL_X
                 .MACRO        HORIZONTAL_LINE
                 			  LDI R17, @0
                 				LDI R16,@1
                 				other:
                 				push r16
                 				push r17
                 				CALL SET_XY // X= R17, Y=R16
                 				pop r17
                 				pop r16
                 				inc r17
                 				CPI R17 ,@2+1
                 				BRLO other
                 .ENDMACRO
                 
                 ; VERTICAL_LINE X,Y, FINAL_Y
                 .MACRO		   VERTICAL_LINE
                 				LDI R17, @0
                 				LDI R16, @1
                 				other:
                 				push r16
                 				push r17
                 				call SET_XY
                 				pop r17
                 				pop r16
                 				inc r16
                 				cpi r16 , @2+1
                 				brlo other
                 .ENDMACRO
                 
                 .MACRO		RECTANGLE ; X,Y,LENGTH,HEIGHT
                 			HORIZONTAL_LINE @0,@1,@2
                 			HORIZONTAL_LINE @0,@3,@2
                 			VERTICAL_LINE @0,@1,@3
                 			VERTICAL_LINE @2,@1,@3
                 .ENDMACRO
                 
                 .MACRO		DISPLAY_BMP ; (Z POINTER)
                 			ldi zh, high(@0<<1)
                 			ldi zl,low(@0<<1)
                 			ldi r16, 0
                 			other_disp_bmp:
                 			push r16
                 			SBI CONTROL,CS1
                 			SBI CONTROL,CS2
                 			call SET_X
                 			pop r16
                 			push r16
                 			call other_page_bmp
                 			pop r16
                 			inc r16
                 			cpi r16,8
                 			brlo other_disp_bmp
                 .ENDMACRO
                 
                 
                 
000000 e004      LDI R16, high(RAMEND)
000001 bf0e      OUT SPH, R16
000002 e50f      LDI R16, low(RAMEND)
000003 bf0d      OUT SPL, R16
                 
000004 ef0f      LDI R16, 0XFF; DATA AND CONTROL AS OUTPUT
000005 bb0a      OUT CONTROL_DDR, R16
000006 bb01      OUT DATA_DDR, R16
                 
                 
000007 940e 0278 CALL delay10ms
000009 940e 0278 call delay10ms
                 
                 
00000b 940e 0227 CALL LCD_ON
00000d 9ad8      sbi control, cs1
00000e 98d9      cbi control, cs2
00000f e000      LDI R16,0
000010 940e 0217 call SET_X
000012 e000      LDI R16,0
000013 940e 021d call SET_Y
000015 e004      LDI R16,4
000016 940e 0246 call WRITE_D
                 
000018 e015
000019 e005
00001a 930f
00001b 931f
00001c 940e 01c0
00001e 911f
00001f 910f
000020 9513
000021 3719
000022 f3b8      HORIZONTAL_LINE 5,5,120
000023 940e 028b call delay1s
000025 e015
000026 e30c
000027 930f
000028 931f
000029 940e 01c0
00002b 911f
00002c 910f
00002d 9513
00002e 3719
00002f f3b8      HORIZONTAL_LINE 5,60,120
000030 940e 028b call delay1s
000032 e015
000033 e006
000034 930f
000035 931f
000036 940e 01c0
000038 911f
000039 910f
00003a 9503
00003b 330d
00003c f3b8      VERTICAL_LINE 5,6,60
00003d 940e 028b call delay1s
00003f e718
000040 e006
000041 930f
000042 931f
000043 940e 01c0
000045 911f
000046 910f
000047 9503
000048 330d
000049 f3b8      VERTICAL_LINE 120,6,60
00004a 940e 028b call delay1s
00004c e01a
00004d e00a
00004e 930f
00004f 931f
000050 940e 01c0
000052 911f
000053 910f
000054 9513
000055 3615
000056 f3b8
000057 e01a
000058 e302
000059 930f
00005a 931f
00005b 940e 01c0
00005d 911f
00005e 910f
00005f 9513
000060 3615
000061 f3b8
000062 e01a
000063 e00a
000064 930f
000065 931f
000066 940e 01c0
000068 911f
000069 910f
00006a 9503
00006b 3303
00006c f3b8
00006d e614
00006e e00a
00006f 930f
000070 931f
000071 940e 01c0
000073 911f
000074 910f
000075 9503
000076 3303
000077 f3b8      RECTANGLE 10,10,100,50
000078 940e 028b call delay1s
00007a e114
00007b e104
00007c 930f
00007d 931f
00007e 940e 01c0
000080 911f
000081 910f
000082 9513
000083 351b
000084 f3b8
000085 e114
000086 e208
000087 930f
000088 931f
000089 940e 01c0
00008b 911f
00008c 910f
00008d 9513
00008e 351b
00008f f3b8
000090 e114
000091 e104
000092 930f
000093 931f
000094 940e 01c0
000096 911f
000097 910f
000098 9503
000099 3209
00009a f3b8
00009b e51a
00009c e104
00009d 930f
00009e 931f
00009f 940e 01c0
0000a1 911f
0000a2 910f
0000a3 9503
0000a4 3209
0000a5 f3b8      RECTANGLE 20,20,90,40
0000a6 940e 028b call delay1s
0000a8 e11e
0000a9 e10e
0000aa 930f
0000ab 931f
0000ac 940e 01c0
0000ae 911f
0000af 910f
0000b0 9513
0000b1 3511
0000b2 f3b8
0000b3 e11e
0000b4 e10e
0000b5 930f
0000b6 931f
0000b7 940e 01c0
0000b9 911f
0000ba 910f
0000bb 9513
0000bc 3511
0000bd f3b8
0000be e11e
0000bf e10e
0000c0 930f
0000c1 931f
0000c2 940e 01c0
0000c4 911f
0000c5 910f
0000c6 9503
0000c7 310f
0000c8 f3b8
0000c9 e510
0000ca e10e
0000cb 930f
0000cc 931f
0000cd 940e 01c0
0000cf 911f
0000d0 910f
0000d1 9503
0000d2 310f
0000d3 f3b8      RECTANGLE 30,30,80,30
0000d4 940e 028b call delay1s
0000d6 e218
0000d7 e208
0000d8 930f
0000d9 931f
0000da 940e 01c0
0000dc 911f
0000dd 910f
0000de 9513
0000df 3417
0000e0 f3b8
0000e1 e218
0000e2 e104
0000e3 930f
0000e4 931f
0000e5 940e 01c0
0000e7 911f
0000e8 910f
0000e9 9513
0000ea 3417
0000eb f3b8
0000ec e218
0000ed e208
0000ee 930f
0000ef 931f
0000f0 940e 01c0
0000f2 911f
0000f3 910f
0000f4 9503
0000f5 3105
0000f6 f3b8
0000f7 e416
0000f8 e208
0000f9 930f
0000fa 931f
0000fb 940e 01c0
0000fd 911f
0000fe 910f
0000ff 9503
000100 3105
000101 f3b8      RECTANGLE 40,40,70,20
000102 940e 028b call delay1s
000104 940e 013f call CLEAR_LCD
000106 e1f0
000107 e0e0
000108 e000
000109 930f
00010a 9ad8
00010b 9ad9
00010c 940e 0217
00010e 910f
00010f 930f
000110 940e 0148
000112 910f
000113 9503
000114 3008
000115 f398      DISPLAY_BMP IMAGE
000116 940e 028b call delay1s
000118 940e 0230 call LCD_OFF
00011a 940e 028b call delay1s
00011c 940e 0227 call LCD_ON
00011e 940e 028b call delay1s
000120 940e 0230 call LCD_OFF
000122 940e 028b call delay1s
000124 940e 0227 call LCD_ON
000126 940e 028b call delay1s
000128 940e 0230 call LCD_OFF
00012a 940e 028b call delay1s
00012c 940e 0227 call LCD_ON
                 
00012e e000      LDI R16, 0
                 other_start:
00012f 930f      push r16
000130 940e 0223 call SET_DISPLAY_START_LINE
000132 940e 0278 call delay10ms
000134 940e 0278 call delay10ms
000136 940e 0278 call delay10ms
000138 940e 0278 call delay10ms
00013a 910f      pop r16
00013b 9503      inc r16
00013c 330f      cpi r16, 63
00013d f388      brlo other_start
                 
                 
                 
                 
00013e cfff      end: rjmp end
                 
                 CLEAR_LCD:		
00013f e000      LDI R16,0
                 OTHER_CLEAR_LCD:
000140 930f      push r16
000141 940e 0157 CALL CLEAR_PAGE
000143 910f      pop r16
000144 9503      INC R16
000145 3008      CPI R16,8
000146 f3c8      BRLO OTHER_CLEAR_LCD
000147 9508      ret
                 
                 
                 
                 other_page_bmp:
000148 e000      ldi r16,0
000149 940e 021d call SET_Y ; Y at 0 for beginning of page
00014b e000      ldi r16,0
                 other_page_y_bmp_2:
00014c 940e 0167 call SELECT_CHIP
00014e 930f      push r16
00014f 9105      lpm r16,z+
000150 940e 0246 call WRITE_D ;y auto increments
000152 910f      pop r16
000153 9503      inc r16
000154 3800      cpi r16,128
000155 f3b0      brlo other_page_y_bmp_2
000156 9508      ret
                 
                 
                 
                 
                 
                 CLEAR_PAGE://page at r16, x:0-7
000157 9ad8      SBI CONTROL,CS1
000158 9ad9      SBI CONTROL,CS2
000159 940e 0217 CALL SET_X
00015b e000      ldi r16,0
                 other_page_y:
00015c 940e 0167 call SELECT_CHIP
00015e 930f      push r16
00015f e000      ldi r16,0
000160 940e 0246 call WRITE_D 
000162 910f      pop r16
000163 9503      inc r16
000164 3800      cpi r16,128
000165 f3b0      brlo other_page_y
000166 9508      ret
                 
                 SELECT_CHIP://SELECT CHIP BASED ON Y, Y AT R16
000167 3400      CPI R16,64
000168 f418      BRSH SELECT_CHIP_2
                 SELECT_CHIP_1:
000169 9ad8      SBI CONTROL,CS1
00016a 98d9      CBI CONTROL,CS2
00016b 9508      ret
                 SELECT_CHIP_2:
00016c 9ad9      SBI CONTROL,CS2
00016d 98d8      CBI CONTROL,CS1
00016e 9508      ret
                 
                 
                 
                 CLEAR_XY: ;LIGHT SPOT
00016f 3410      CPI R17,64
000170 f460      BRSH LIGHT_Y_CS2
                 LIGHT_Y_CS1:
000171 9ad8      SBI CONTROL,CS1
000172 98d9      CBI CONTROL,CS2
000173 930f      push r16
000174 2f01      MOV R16,R17
000175 931f      push r17
000176 940e 021d CALL SET_Y
000178 911f      pop r17
000179 910f      pop r16
00017a 940e 018a call X_CALC_LIGHT
00017c 9508      ret
                 
                 LIGHT_Y_CS2:
00017d 98d8      CBI CONTROL,CS1
00017e 9ad9      SBI CONTROL,CS2
00017f 5410      SUBI R17, 64
000180 930f      push r16
000181 2f01      Mov r16,r17
000182 931f      push r17
000183 940e 021d CALL SET_Y
000185 911f      pop r17
000186 910f      pop r16
000187 940e 018a call X_CALC_LIGHT
000189 9508      ret
                 
                 
                 X_CALC_LIGHT:
00018a 931f      push r17
00018b 3008      CPI R16,8
00018c f0e0      BRLO DIRECT_X_light
00018d e010      LDI R17,0
                 OTHER_PAGE_NUMBER_LIGHT:
00018e 5008      SUBI R16,8
00018f 9513      INC R17 // page number
000190 3008      CPI R16,8 
000191 f7e0      BRSH OTHER_PAGE_NUMBER_LIGHT
000192 930f      push r16
000193 2f01      MOV R16,R17
000194 940e 0217 CALL SET_X
000196 910f      POP R16
000197 940e 020f call SHIFT_X
000199 930f      push r16
00019a 940e 024c call READ_D
00019c 2f10      MOV R17,R16
00019d 910f      pop r16
00019e 9501      NEG R16
00019f 2301      AND R16,R17
0001a0 2e10      mov r1,r16
0001a1 911f      pop r17
0001a2 2f01      MOV R16,R17
0001a3 940e 021d call SET_Y
0001a5 2d01      mov r16,r1
0001a6 940e 0246 CALL WRITE_D
0001a8 9508      ret
                 DIRECT_X_LIGHT:
0001a9 930f      push R16
0001aa e000      LDI R16,0
0001ab 940e 0217 call SET_X
0001ad 910f      pop r16
0001ae 940e 020f call SHIFT_X
0001b0 930f      push r16
0001b1 940e 024c call READ_D
0001b3 2f10      MOV R17,R16
0001b4 910f      pop r16
0001b5 9501      neg r16
0001b6 2301      AND R16,R17
0001b7 2e10      mov r1,r16
0001b8 911f      pop r17
0001b9 2f01      mov r16,r17
0001ba 940e 021d call SET_Y
0001bc 2d01      MOV R16,R1
0001bd 940e 0246 call WRITE_D
0001bf 9508      ret
                 
                 
                 
                 
                 SET_XY:;R16 for X, R17 for Y, DARK SPOT
0001c0 3410      CPI R17,64
0001c1 f460      BRSH Y_CS2
                 Y_CS1:
0001c2 9ad8      SBI CONTROL,CS1
0001c3 98d9      CBI CONTROL,CS2
0001c4 930f      push r16
0001c5 2f01      MOV R16,R17
0001c6 931f      push r17
0001c7 940e 021d CALL SET_Y
0001c9 911f      pop r17
0001ca 910f      pop r16
0001cb 940e 01db call X_CALC
0001cd 9508      ret
                 
                 Y_CS2:
0001ce 98d8      CBI CONTROL,CS1
0001cf 9ad9      SBI CONTROL,CS2
0001d0 5410      SUBI R17, 64
0001d1 930f      push r16
0001d2 2f01      Mov r16,r17
0001d3 931f      push r17
0001d4 940e 021d CALL SET_Y
0001d6 911f      pop r17
0001d7 910f      pop r16
0001d8 940e 01db call X_CALC
0001da 9508      ret
                 
                 
                 
                 X_CALC:
0001db 931f      push r17
0001dc 3008      CPI R16,8
0001dd f0d8      BRLO DIRECT_X
0001de e010      LDI R17,0
                 OTHER_PAGE_NUMBER:
0001df 5008      SUBI R16,8
0001e0 9513      INC R17 // page number
0001e1 3008      CPI R16,8 
0001e2 f7e0      BRSH OTHER_PAGE_NUMBER
0001e3 930f      push r16
0001e4 2f01      MOV R16,R17
0001e5 940e 0217 CALL SET_X
0001e7 910f      POP R16
0001e8 940e 020f call SHIFT_X
0001ea 930f      push r16
0001eb 940e 024c call READ_D
0001ed 2f10      MOV R17,R16
0001ee 910f      pop r16
0001ef 2b01      OR R16,R17
0001f0 2e10      mov r1,r16
0001f1 911f      pop r17
0001f2 2f01      MOV R16,R17
0001f3 940e 021d call SET_Y
0001f5 2d01      mov r16,r1
0001f6 940e 0246 CALL WRITE_D
0001f8 9508      ret
                 DIRECT_X:
0001f9 930f      push R16
0001fa e000      LDI R16,0
0001fb 940e 0217 call SET_X
0001fd 910f      pop r16
0001fe 940e 020f call SHIFT_X
000200 930f      push r16
000201 940e 024c call READ_D
000203 2f10      MOV R17,R16
000204 910f      pop r16
000205 2b01      OR R16,R17
000206 2e10      mov r1,r16
000207 911f      pop r17
000208 2f01      mov r16,r17
000209 940e 021d call SET_Y
00020b 2d01      MOV R16,R1
00020c 940e 0246 call WRITE_D
00020e 9508      ret
                 
                 
                 
                 SHIFT_X:
00020f 9408      SEC //SET CARRY FLAG
000210 e010      LDI R17,0
000211 9503      INC R16
                 other_shift:
000212 1f11      ROL R17
000213 950a      DEC R16
000214 f7e9      BRNE other_shift
000215 2f01      MOV R16,R17
000216 9508      ret
                 
                 
                 SET_X: ;X AT R16 (0-7)
000217 7007      ANDI R16, 0b00000111
000218 eb18      ldi r17, 0b10111000
000219 2b01      OR R16,R17
00021a 940e 0240 call WRITE_I
00021c 9508      ret
                 
                 SET_Y:; Y AT R16 (0-64)
00021d 730f      ANDI R16,0b00111111
00021e e410      LDI R17, 0b01000000
00021f 2b01      OR R16,R17
000220 940e 0240 call WRITE_I
000222 9508      ret
                 
                 SET_DISPLAY_START_LINE:; START LINE AT R16
000223 6c00      SBR R16,0xC0
000224 940e 0240 call WRITE_I
000226 9508      ret
                 
                 
                 
                 LCD_ON:
000227 9ad8      SBI CONTROL,CS1
000228 9ad9      SBI CONTROL,CS2
000229 98da      CBI CONTROL, RS
00022a 98db      CBI CONTROL, RW
00022b e30f      LDI R16, 0X3F
00022c bb02      OUT DATA, R16
00022d 940e 0239 call TRIGGER_ENABLE
00022f 9508      ret
                 
                 
                 LCD_OFF:
000230 9ad8      SBI CONTROL,CS1
000231 9ad9      SBI CONTROL,CS2
000232 98da      CBI CONTROL, RS
000233 98db      CBI CONTROL, RW
000234 e30e      LDI R16, 0X3E
000235 bb02      OUT DATA, R16
000236 940e 0239 call TRIGGER_ENABLE
000238 9508      ret
                 
                 
                 TRIGGER_ENABLE:
000239 940e 0266 call delay10us
00023b 9adc      SBI CONTROL, ENABLE
00023c 940e 0266 call delay10us
00023e 98dc      CBI CONTROL, ENABLE
                 ;call delay10us
00023f 9508      ret
                 
                 
                 WRITE_I:
000240 98da      CBI CONTROL,RS
000241 98db      CBI CONTROL,RW
000242 bb02      OUT DATA, R16
000243 940e 0239 call TRIGGER_ENABLE
000245 9508      ret
                 
                 WRITE_D:
000246 9ada      SBI CONTROL,RS
000247 98db      CBI CONTROL,RW
000248 bb02      OUT DATA, R16
000249 940e 0239 call TRIGGER_ENABLE
00024b 9508      ret
                 
                 READ_D:
00024c e000      ldi r16,0
00024d bb01      out DATA_DDR,R16
00024e 9ada      SBI CONTROL,RS
00024f 9adb      SBI CONTROL,RW
000250 940e 0272 call delay1us
000252 9adc      SBI CONTROL, ENABLE
000253 940e 0272 call delay1us
000255 98dc      CBI CONTROL, ENABLE
000256 940e 0266 call delay10us
000258 940e 0266 call delay10us
00025a 9adc      SBI CONTROL,ENABLE
00025b 940e 0272 CALL delay1us
00025d b300      IN R16,DATA_PIN
00025e 98dc      CBI CONTROL,ENABLE
00025f 940e 0272 call delay1us
000261 930f      push r16
000262 ef0f      ldi r16,0xff
000263 bb01      out DATA_DDR,R16;keep as output
000264 910f      pop r16
000265 9508      ret
                 
                 delay10us:
000266 934f      push r20
000267 e540      ldi r20, 80
                 ciclo_delay10us:
000268 954a      DEC R20
000269 f7f1      BRNE ciclo_delay10us
00026a 914f      pop r20
00026b 9508      ret
                 
                 delay5us:
00026c 934f      push r20
00026d e04a      ldi r20,10
                 ciclo_delay5us:
00026e 954a      dec r20
00026f f7f1      brne ciclo_delay5us
000270 914f      pop r20
000271 9508      ret
                 
                 
                 delay1us:
000272 934f      push r20
000273 e048      ldi r20, 8
                 ciclo_delay1us:
000274 954a      DEC R20
000275 f7f1      BRNE ciclo_delay1us
000276 914f      pop r20
000277 9508      ret
                 
                 
                 delay10ms:
000278 934f      	push r20
000279 935f      	push r21
00027a e648      	LDI R20, 104
00027b ef5f      	ciclo1: LDI R21, 255
00027c 955a      	ciclo:  dec r21
00027d f7f1      		BRNE ciclo
00027e 954a      		DEC R20
00027f f7d9      		BRNE CICLO1
000280 915f      		pop r21
000281 914f      		pop r20
000282 9508      RET
                 
                 delay100ms:
000283 934f      push r20
000284 e04a      ldi r20,10
                 other_delay100ms:
000285 940e 0278 call delay10ms
000287 954a      dec r20
000288 f7e1      brne other_delay100ms
000289 914f      pop r20
00028a 9508      ret
                 
                 delay1s:
00028b 934f      push r20
00028c e644      ldi r20,100
                 other_delay1s:
00028d 940e 0278 	call delay10ms
00028f 954a      	dec r20
000290 f7e1      	brne other_delay1s
000291 914f      pop r20
000292 9508      ret
                 
                 delay10s:
000293 934f      push r20
000294 e04a      ldi r20,10
                 other_delay10s:
000295 940e 028b 	call delay1s
000297 954a      	dec r20
000298 f7e1      	brne other_delay10s
000299 914f      pop r20
00029a 9508      ret
                 
                 delay5s:
00029b 934f      push r20
00029c e045      ldi r20,5
                 other_delay5s:
00029d 940e 028b 	call delay1s
00029f 954a      	dec r20
0002a0 f7e1      	brne other_delay5s
0002a1 914f      pop r20
0002a2 9508      ret
                 
                 .org IMAGE
000800 0000
000801 0000
000802 0000
000803 0000
000804 0000
000805 0000
000806 0000
000807 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000808 0000
000809 0000
00080a 0000
00080b 0000
00080c 0000
00080d 0000
00080e 0000
00080f 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000810 0000
000811 0000
000812 0000
000813 0000
000814 0000
000815 0000
000816 0000
000817 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000818 0000
000819 0000
00081a 0000
00081b 0000
00081c 0000
00081d 0000
00081e 0000
00081f 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000820 0000
000821 0000
000822 0000
000823 0000
000824 0000
000825 0000
000826 0000
000827 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000828 0000
000829 0000
00082a 0000
00082b 0000
00082c 0000
00082d 0000
00082e 0000
00082f 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000830 0000
000831 0000
000832 0000
000833 0000
000834 0000
000835 0000
000836 0000
000837 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000838 0000
000839 0000
00083a 0000
00083b 0000
00083c 0000
00083d 0000
00083e 0000
00083f 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000840 0000
000841 0000
000842 0000
000843 0000
000844 0000
000845 0000
000846 0000
000847 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000848 0000
000849 0000
00084a 0000
00084b 0000
00084c fefe
00084d 06fe
00084e 0606
00084f 0606      .db 0,0,0,0,0,0,0,0,254,254,254,6,6,6,6,6
000850 0606
000851 0606
000852 fc0c
000853 e0f8
000854 0000
000855 e000
000856 f8f0
000857 0c18      .db 6,6,6,6,12,252,248,224,0,0,0,224,240,248,24,12
000858 0606
000859 0606
00085a 0606
00085b 0c04
00085c f878
00085d 00e0
00085e 0000
00085f 0000      .db 6,6,6,6,6,6,4,12,120,248,224,0,0,0,0,0
000860 fefe
000861 7cfe
000862 e0f8
000863 0000
000864 0000
000865 0000
000866 fefe
000867 00fe      .db 254,254,254,124,248,224,0,0,0,0,0,0,254,254,254,0
000868 0000
000869 8000
00086a f8f0
00086b 0c18
00086c 0606
00086d 0606
00086e 0606
00086f 1c04      .db 0,0,0,128,240,248,24,12,6,6,6,6,6,6,4,28
000870 f8f8
000871 00e0
000872 0000
000873 0000
000874 0000
000875 0000
000876 0000
000877 0000      .db 248,248,224,0,0,0,0,0,0,0,0,0,0,0,0,0
000878 0000
000879 0000
00087a 0000
00087b 0000
00087c 0000
00087d 0000
00087e 0000
00087f 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000880 0000
000881 0000
000882 0000
000883 0000
000884 0000
000885 0000
000886 0000
000887 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000888 0000
000889 0000
00088a 0000
00088b 0000
00088c ffff
00088d 0cff
00088e 0c0c
00088f 0c0c      .db 0,0,0,0,0,0,0,0,255,255,255,12,12,12,12,12
000890 0c0c
000891 0e0c
000892 070e
000893 0003
000894 0000
000895 3f00
000896 f9ff
000897 0080      .db 12,12,12,14,14,7,3,0,0,0,0,63,255,249,128,0
000898 0000
000899 0000
00089a 0000
00089b 8000
00089c ffe0
00089d 0e7f
00089e 0000
00089f 0000      .db 0,0,0,0,0,0,0,128,224,255,127,14,0,0,0,0
0008a0 ffff
0008a1 00ff
0008a2 0100
0008a3 1e07
0008a4 f03c
0008a5 80c0
0008a6 ffff
0008a7 00ff      .db 255,255,255,0,0,1,7,30,60,240,192,128,255,255,255,0
0008a8 0000
0008a9 3f00
0008aa ffff
0008ab 0080
0008ac 0000
0008ad 0000
0008ae 0c00
0008af 0c0c      .db 0,0,0,63,255,255,128,0,0,0,0,0,0,12,12,12
0008b0 fcfc
0008b1 00fc
0008b2 0000
0008b3 0000
0008b4 0000
0008b5 0000
0008b6 0000
0008b7 0000      .db 252,252,252,0,0,0,0,0,0,0,0,0,0,0,0,0
0008b8 0000
0008b9 0000
0008ba 0000
0008bb 0000
0008bc 0000
0008bd 0000
0008be 0000
0008bf 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0008c0 0000
0008c1 0000
0008c2 0000
0008c3 0000
0008c4 0000
0008c5 0000
0008c6 0000
0008c7 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0008c8 0000
0008c9 0000
0008ca 0000
0008cb 0000
0008cc 0f0f
0008cd 000f
0008ce 0000
0008cf 0000      .db 0,0,0,0,0,0,0,0,15,15,15,0,0,0,0,0
0008d0 0000
0008d1 0000
0008d2 0000
0008d3 0000
0008d4 0000
0008d5 0000
0008d6 0000
0008d7 0301      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3
0008d8 0f03
0008d9 0e0e
0008da 030f
0008db 0303
0008dc 0001
0008dd 0000
0008de 0000
0008df 0000      .db 3,15,14,14,15,3,3,3,1,0,0,0,0,0,0,0
0008e0 0f0f
0008e1 000f
0008e2 0000
0008e3 0000
0008e4 0000
0008e5 0301
0008e6 0f0f
0008e7 000f      .db 15,15,15,0,0,0,0,0,0,0,1,3,15,15,15,0
0008e8 0000
0008e9 0000
0008ea 0000
0008eb 0301
0008ec 0f03
0008ed 0e0e
0008ee 0f0e
0008ef 0303      .db 0,0,0,0,0,0,1,3,3,15,14,14,14,15,3,3
0008f0 0f01
0008f1 000f
0008f2 0000
0008f3 0000
0008f4 0000
0008f5 0000
0008f6 0000
0008f7 0000      .db 1,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0
0008f8 0000
0008f9 0000
0008fa 0000
0008fb 0000
0008fc 0000
0008fd 0000
0008fe 0000
0008ff 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000900 0000
000901 0000
000902 0000
000903 0000
000904 0000
000905 0000
000906 0000
000907 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000908 0000
000909 0000
00090a 0000
00090b 0000
00090c 0000
00090d 0000
00090e 0000
00090f 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000910 0000
000911 0000
000912 0000
000913 0000
000914 0000
000915 0000
000916 c000
000917 4040      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,192,64,64
000918 4040
000919 0040
00091a 0000
00091b 40c0
00091c 4040
00091d 4040
00091e c040
00091f 0000      .db 64,64,64,0,0,0,192,64,64,64,64,64,64,192,0,0
000920 c000
000921 4040
000922 4040
000923 4040
000924 00c0
000925 0000
000926 40c0
000927 4040      .db 0,192,64,64,64,64,64,64,192,0,0,0,192,64,64,64
000928 4040
000929 c040
00092a 0000
00092b 0000
00092c 0000
00092d 0000
00092e 0000
00092f 0000      .db 64,64,64,192,0,0,0,0,0,0,0,0,0,0,0,0
000930 0000
000931 0000
000932 0000
000933 0000
000934 0000
000935 0000
000936 0000
000937 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000938 0000
000939 0000
00093a 0000
00093b 0000
00093c 0000
00093d 0000
00093e 0000
00093f 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000940 0000
000941 0000
000942 0000
000943 0000
000944 0000
000945 0000
000946 0000
000947 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000948 0000
000949 0000
00094a 0000
00094b 0000
00094c 0000
00094d 0000
00094e 0000
00094f 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000950 0000
000951 0000
000952 0000
000953 0000
000954 0000
000955 0800
000956 080f
000957 c808      .db 0,0,0,0,0,0,0,0,0,0,0,8,15,8,8,200
000958 0038
000959 c000
00095a 0738
00095b 0000
00095c 0000
00095d 38c0
00095e 0007
00095f 38c0      .db 56,0,0,192,56,7,0,0,0,0,192,56,7,0,192,56
000960 0007
000961 0000
000962 c000
000963 0738
000964 c000
000965 0738
000966 0000
000967 0000      .db 7,0,0,0,0,192,56,7,0,192,56,7,0,0,0,0
000968 38c0
000969 0007
00096a 0000
00096b 0000
00096c 0000
00096d 0000
00096e 0000
00096f 0000      .db 192,56,7,0,0,0,0,0,0,0,0,0,0,0,0,0
000970 0000
000971 0000
000972 0000
000973 0000
000974 0000
000975 0000
000976 0000
000977 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000978 0000
000979 0000
00097a 0000
00097b 0000
00097c 0000
00097d 0000
00097e 0000
00097f 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000980 0000
000981 0000
000982 0000
000983 0000
000984 0000
000985 0000
000986 0000
000987 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000988 0000
000989 0000
00098a 0000
00098b 0000
00098c 0000
00098d 0000
00098e 0000
00098f 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000990 0000
000991 0000
000992 0000
000993 0100
000994 0203
000995 0202
000996 0202
000997 0102      .db 0,0,0,0,0,0,0,1,3,2,2,2,2,2,2,1
000998 0000
000999 0301
00099a 0202
00099b 0202
00099c 0202
00099d 0001
00099e 0100
00099f 0203      .db 0,0,1,3,2,2,2,2,2,2,1,0,0,1,3,2
0009a0 0202
0009a1 0202
0009a2 0102
0009a3 0000
0009a4 0301
0009a5 0202
0009a6 0202
0009a7 0202      .db 2,2,2,2,2,1,0,0,1,3,2,2,2,2,2,2
0009a8 0001
0009a9 0000
0009aa 0000
0009ab 0000
0009ac 0000
0009ad 0000
0009ae 0000
0009af 0000      .db 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0009b0 0000
0009b1 0000
0009b2 0000
0009b3 0000
0009b4 0000
0009b5 0000
0009b6 0000
0009b7 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0009b8 0000
0009b9 0000
0009ba 0000
0009bb 0000
0009bc 0000
0009bd 0000
0009be 0000
0009bf 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0009c0 0000
0009c1 0000
0009c2 0000
0009c3 0000
0009c4 0000
0009c5 0000
0009c6 0000
0009c7 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0009c8 0000
0009c9 0000
0009ca 0000
0009cb 0000
0009cc 0000
0009cd 0000
0009ce 0000
0009cf 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0009d0 0000
0009d1 0000
0009d2 0000
0009d3 0000
0009d4 0000
0009d5 0000
0009d6 0000
0009d7 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0009d8 0000
0009d9 0000
0009da 0000
0009db 0000
0009dc 0000
0009dd 0000
0009de 0000
0009df 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0009e0 0000
0009e1 0000
0009e2 0000
0009e3 0000
0009e4 0000
0009e5 0000
0009e6 0000
0009e7 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0009e8 0000
0009e9 0000
0009ea 0000
0009eb 0000
0009ec 0000
0009ed 0000
0009ee 0000
0009ef 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0009f0 0000
0009f1 0000
0009f2 0000
0009f3 0000
0009f4 0000
0009f5 0000
0009f6 0000
0009f7 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0009f8 0000
0009f9 0000
0009fa 0000
0009fb 0000
0009fc 0000
0009fd 0000
0009fe 0000
0009ff 0000      .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega16" register use summary:
r0 :   0 r1 :   8 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16: 202 r17: 127 r18:   0 r19:   0 r20:  32 r21:   4 r22:   0 r23:   0 
r24:   0 r25:   0 r26:   0 r27:   0 r28:   0 r29:   0 r30:   1 r31:   1 
x  :   0 y  :   0 z  :   1 
Registers used: 8 out of 35 (22.9%)

"ATmega16" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   2 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :  27 brlt  :   0 brmi  :   0 
brne  :  10 brpl  :   0 brsh  :   5 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  : 108 cbi   :  17 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  32 cpse  :   0 dec   :  10 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :  28 jmp   :   0 
ld    :   0 ldd   :   0 ldi   :  75 lds   :   0 lpm   :   1 lsl   :   0 
lsr   :   0 mov   :  23 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   2 nop   :   0 or    :   4 ori   :   0 out   :  10 pop   :  76 
push  :  74 rcall :   0 ret   :  31 reti  :   0 rjmp  :   1 rol   :   1 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  21 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   1 sbrc  :   0 sbrs  :   0 sec   :   1 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   0 
sub   :   0 subi  :   4 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 26 out of 113 (23.0%)

"ATmega16" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001400   1350   1024   2374   16384  14.5%
[.dseg] 0x000060 0x000060      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
